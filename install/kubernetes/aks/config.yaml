apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.34.0 (HEAD)
  labels:
    io.kompose.service: app
  name: app
spec:
  ports:
    - name: "8080"
      port: 8080
      targetPort: 8080
    - name: "9090"
      port: 9090
      targetPort: 9090
  selector:
    io.kompose.service: app
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.34.0 (HEAD)
  labels:
    io.kompose.service: keycloak
  name: keycloak
spec:
  ports:
    - name: "18080"
      port: 18080
      targetPort: 8080
  selector:
    io.kompose.service: keycloak
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.34.0 (HEAD)
  labels:
    io.kompose.service: mongo
  name: mongo
spec:
  ports:
    - name: "27017"
      port: 27017
      targetPort: 27017
  selector:
    io.kompose.service: mongo
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.34.0 (HEAD)
  labels:
    io.kompose.service: app
  name: app-1
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: app
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert
        kompose.version: 1.34.0 (HEAD)
      labels:
        io.kompose.service: app
    spec:
      containers:
        - env:
            - name: JAVA_OPTIONS
              value: -Dspring.security.oauth2.resourceserver.jwt.issuer-uri=http://keycloak:18080/realms/microcks -Dspring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://keycloak:8080/realms/microcks/protocol/openid-connect/certs
            - name: KEYCLOAK_PUBLIC_URL
              value: http://keycloak:8080
            - name: KEYCLOAK_URL
              value: http://microcks:8080
            - name: POSTMAN_RUNNER_URL
              value: http://postman:3000
            - name: SERVICES_UPDATE_INTERVAL
              value: 0 0 0/2 * * *
            - name: SPRING_DATA_MONGODB_DATABASE
              value: microcks
            - name: SPRING_DATA_MONGODB_URI
              value: mongodb://mongo:27017
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: TEST_CALLBACK_URL
              value: http://microcks:8080
            - name: KEYCLOAK_ENABLED
              value: "false"            
          image: quay.io/microcks/microcks:1.10.1
          name: microcks
          ports:
            - containerPort: 8080
              protocol: TCP
            - containerPort: 9090
              protocol: TCP
      restartPolicy: Always
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.34.0 (HEAD)
  labels:
    io.kompose.service: keycloak
  name: keycloak-1
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: keycloak
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert
        kompose.version: 1.34.0 (HEAD)
      labels:
        io.kompose.service: keycloak
    spec:
      containers:
        - args:
            - start-dev
            - --import-realm
          env:
            - name: KC_HOSTNAME_ADMIN_URL
              value: http://keycloak:18080
            - name: KC_HOSTNAME_URL
              value: http://keycloak:18080
            - name: KEYCLOAK_ADMIN
              value: admin
            - name: KEYCLOAK_ADMIN_PASSWORD
              value: admin
          image: quay.io/keycloak/keycloak:24.0.4
          name: microcks-sso
          ports:
            - containerPort: 8080
              protocol: TCP
          volumeMounts:
            - mountPath: /opt/keycloak/data/import/
              name: keycloak-claim0
      restartPolicy: Always
      volumes:
        - name: keycloak-claim0
          configMap:
            name: keycloak-configmap
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.34.0 (HEAD)
  labels:
    io.kompose.service: mongo
  name: mongo
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: mongo
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert
        kompose.version: 1.34.0 (HEAD)
      labels:
        io.kompose.service: mongo
    spec:
      containers:
        - image: mongo:4.4.29
          name: microcks-db
          ports:
            - containerPort: 27017
              protocol: TCP
          volumeMounts:
            - name: "mongodb-persistent-storage"
              mountPath: "/data/db"
      restartPolicy: Always
      volumes:
        - name: "mongodb-persistent-storage"
          persistentVolumeClaim:
            claimName: "mongo-cm0"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.34.0 (HEAD)
  labels:
    io.kompose.service: postman
  name: postman
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: postman
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert
        kompose.version: 1.34.0 (HEAD)
      labels:
        io.kompose.service: postman
    spec:
      containers:
        - image: quay.io/microcks/microcks-postman-runtime:0.6.0
          name: microcks-postman-runtime
      restartPolicy: Always
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    io.kompose.service: keycloak-claim0
  name: keycloak-claim0
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    io.kompose.service: mongo-cm0
  name: mongo-cm0
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
apiVersion: v1
kind: Service
metadata:
  name: lb-app
spec:
  selector:
    io.kompose.service: app
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
  type: LoadBalancer
---
apiVersion: v1
kind: Service
metadata:
  name: lb-keycloak
spec:
  selector:
    io.kompose.service: keycloak
  ports:
    - name: "18080"
      port: 18080
      targetPort: 18080
  type: LoadBalancer
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongo-cm0
data:
  mongo.conf: |
    storage:
      dbPath: /data/db
---
apiVersion: v1
data:
  realm.json: |
    {"id":"microcks","realm":"microcks","displayName":"Microcks","enabled":true,"sslRequired":"none","registrationAllowed":false,"users":[{"username":"admin","enabled":true,"credentials":[{"type":"password","value":"microcks123"}],"realmRoles":[],"applicationRoles":{"realm-management":["manage-users","manage-clients"],"account":["manage-account"],"microcks-app":["user","manager","admin"]}}],"roles":{"realm":[],"client":{"microcks-app":[{"name":"user","composite":false,"clientRole":true,"containerId":"microcks"},{"name":"admin","composite":false,"clientRole":true,"containerId":"microcks"},{"name":"manager","composite":false,"clientRole":true,"containerId":"microcks"}]}},"groups":[{"name":"microcks","path":"/microcks","attributes":{},"realmRoles":[],"clientRoles":{},"subGroups":[{"name":"manager","path":"/microcks/manager","attributes":{},"realmRoles":[],"clientRoles":{},"subGroups":[]}]}],"defaultRoles":[],"requiredCredentials":["password"],"scopeMappings":[],"clientScopeMappings":{"microcks-app":[{"client":"microcks-app-js","roles":["manager","admin","user"]}],"realm-management":[{"client":"microcks-app-js","roles":["manage-users","manage-clients"]}]},"clients":[{"clientId":"microcks-app-js","enabled":true,"publicClient":true,"redirectUris":["http://microcks:8080/*"],"webOrigins":["+"],"fullScopeAllowed":false,"protocolMappers":[{"name":"microcks-group-mapper","protocol":"openid-connect","protocolMapper":"oidc-group-membership-mapper","consentRequired":false,"config":{"full.path":"true","id.token.claim":"true","access.token.claim":"true","claim.name":"microcks-groups","userinfo.token.claim":"true"}}]}],"applications":[{"name":"microcks-app","enabled":true,"bearerOnly":true,"defaultRoles":["user"]},{"name":"microcks-serviceaccount","secret":"ab54d329-e435-41ae-a900-ec6b3fe15c54","enabled":true,"bearerOnly":false,"publicClient":false,"standardFlowEnabled":false,"directAccessGrantsEnabled":true,"serviceAccountsEnabled":true,"clientAuthenticatorType":"client-secret"}],"requiredActions":[{"alias":"VERIFY_PROFILE","name":"Verify Profile","providerId":"VERIFY_PROFILE","enabled":false,"defaultAction":false,"priority":90,"config":{}}],"keycloakVersion":"10.0.1"}
kind: ConfigMap
metadata:
  name: keycloak-configmap
